"""used table inheritance for order models

Revision ID: 9f479f4a0af1
Revises: ad925e19bf90
Create Date: 2025-03-18 18:40:14.258595

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from orders.models import OrderCategory, OrderStatus
from payments.models import AvailablePaymentSystems

# revision identifiers, used by Alembic.
revision: str = "9f479f4a0af1"
down_revision: Union[str, None] = "ad925e19bf90"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

_status_enum = postgresql.ENUM(OrderStatus, name="orderstatus", create_type=False)
_payment_systems_enum = postgresql.ENUM(
    AvailablePaymentSystems, name="availablepaymentsystems", create_type=False
)
_category_enum = postgresql.ENUM(OrderCategory, name="ordercategory")


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "base_order",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "order_date", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "status",
            _status_enum,
            server_default=sa.text("'PENDING'"),
            nullable=False,
        ),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("customer_email", sa.String(), nullable=True),
        sa.Column(
            "category",
            _category_enum,
            nullable=False,
        ),
        sa.Column("bill_id", sa.String(), nullable=True),
        sa.Column(
            "paid_with",
            _payment_systems_enum,
            nullable=True,
        ),
        sa.CheckConstraint("customer_email IS NOT NULL OR user_id IS NOT NULL"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "in_app_order",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("customer_tg_username", sa.String(), nullable=False),
        sa.Column("customer_phone", sa.String(), nullable=True),
        sa.Column("customer_name", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["base_order.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "steam_top_up_order",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("steam_login", sa.String(), nullable=False),
        sa.Column("amount", sa.Numeric(), nullable=False),
        sa.Column("percent_fee", sa.Integer(), nullable=False),
        sa.CheckConstraint("amount > 0"),
        sa.ForeignKeyConstraint(
            ["id"],
            ["base_order.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "in_app_order_item",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("product_id", sa.Integer(), nullable=False),
        sa.Column("order_id", sa.UUID(), nullable=False),
        sa.Column("price", sa.Numeric(), nullable=False),
        sa.Column("region", sa.String(), nullable=True),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["order_id"], ["in_app_order.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["product_id"], ["product.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_table("order_item")
    op.drop_table("order")
    op.drop_table("steam_top_up")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "steam_top_up",
        sa.Column("steam_login", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("amount", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column("percent_fee", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "order_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("bill_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "status",
            _status_enum,
            server_default=sa.text("'PENDING'::orderstatus"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "paid_with",
            _payment_systems_enum,
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("customer_email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.CheckConstraint("amount > 0::numeric", name="steam_top_up_amount_check"),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name="steam_top_up_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="steam_top_up_pkey"),
    )
    op.create_table(
        "order_item",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("product_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("order_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("price", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column(
            "quantity",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("region", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["order.id"],
            name="order_item_order_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["product.id"],
            name="order_item_product_id_fkey",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name="order_item_pkey"),
    )
    op.create_table(
        "order",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "order_date",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "status",
            _status_enum,
            server_default=sa.text("'PENDING'::orderstatus"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("customer_email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("customer_phone", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("customer_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "customer_tg_username", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column("bill_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "paid_with",
            _payment_systems_enum,
            autoincrement=False,
            nullable=True,
        ),
        sa.CheckConstraint(
            "customer_email IS NOT NULL AND customer_name IS NOT NULL OR user_id IS NOT NULL",
            name="order_check",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="order_user_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="order_pkey"),
    )
    op.drop_table("in_app_order_item")
    op.drop_table("steam_top_up_order")
    op.drop_table("in_app_order")
    op.drop_table("base_order")
    # ### end Alembic commands ###
