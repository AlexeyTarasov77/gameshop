from collections.abc import Sequence
from typing import Protocol
from orders.schemas import CreateOrderDTO, OrderItemCreateDTO, UpdateOrderDTO
from orders.models import Order, OrderItem


class OrdersRepositoryI(Protocol):
    async def create(self, dto: CreateOrderDTO) -> Order: ...
    async def update_by_id(self, dto: UpdateOrderDTO, order_id: int) -> Order: ...
    async def delete_by_id(self, order_id: int) -> None: ...
    async def list_orders_for_user(
        self, limit: int, offset: int, user_id: int
    ) -> Sequence[Order]: ...
    async def list_all_orders(self, limit: int, offset: int) -> Sequence[Order]: ...
    async def get_by_id(self, order_id: int) -> Order: ...
    async def get_records_count(self) -> int: ...


class OrderItemsRepositoryI(Protocol):
    async def create_many(
        self, dto_list: list[OrderItemCreateDTO], order_id: int
    ) -> list[OrderItem]: ...
