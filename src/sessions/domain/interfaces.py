import typing as t

from sessions.schemas import AddToCartDTO


class CartManagerI(t.Protocol):
    async def add(self, dto: AddToCartDTO) -> int: ...

    async def delete_by_id(self, product_id: int): ...

    async def update_qty_by_id(self, product_id: int, qty: int): ...

    async def check_exists(self, product_id: int) -> bool: ...

    async def create(self, dto: AddToCartDTO): ...

    async def list_items(self) -> dict[int, int]: ...


class _BaseManagerFactoryI[T](t.Protocol):
    def __call__(
        self, session_key: str | None = None, user_id: int | None = None
    ) -> T: ...


class CartManagerFactoryI(_BaseManagerFactoryI[CartManagerI], t.Protocol): ...


class WishlistManagerI(t.Protocol):
    async def append(self, product_id: int): ...

    async def remove(self, product_id: int): ...

    async def check_exists(self, product_id: int) -> bool: ...

    async def list_ids(self) -> t.Sequence[int]: ...


class WishlistManagerFactoryI(_BaseManagerFactoryI[WishlistManagerI], t.Protocol): ...
